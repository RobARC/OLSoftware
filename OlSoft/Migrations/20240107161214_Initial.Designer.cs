// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OLSofwareDos.Context;

#nullable disable

namespace OlSoft.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240107161214_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "2f316e7b-57f8-40ad-a765-8fdc3c0d113a",
                            ConcurrencyStamp = "3cd9b9d6-68f8-447c-bbb6-f36fa04388d0",
                            Name = "Publico",
                            NormalizedName = "PUBLICO"
                        },
                        new
                        {
                            Id = "820c1083-836a-4db6-ae0c-381b58c35170",
                            ConcurrencyStamp = "7c741c89-1a9f-4d6b-9af1-060fa949c600",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4ddb3e82-d252-429f-864d-5fb9324c27f5",
                            RoleId = "820c1083-836a-4db6-ae0c-381b58c35170"
                        },
                        new
                        {
                            UserId = "76588b1d-43a5-40bf-928b-9c68500b6de2",
                            RoleId = "820c1083-836a-4db6-ae0c-381b58c35170"
                        },
                        new
                        {
                            UserId = "fd3476df-ca02-45e8-82f2-995e78d81a94",
                            RoleId = "2f316e7b-57f8-40ad-a765-8fdc3c0d113a"
                        },
                        new
                        {
                            UserId = "6c37d2ea-dadf-46f0-b96f-4e1dd20d3b73",
                            RoleId = "2f316e7b-57f8-40ad-a765-8fdc3c0d113a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OLSofwareDos.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4ddb3e82-d252-429f-864d-5fb9324c27f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf27cd48-1044-4cc1-876c-7afc1014fa51",
                            Email = "roberth@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROBERTH@GMAIL.COM",
                            NormalizedUserName = "ROBERTH",
                            PasswordHash = "AQAAAAEAACcQAAAAEHXvdo62bORn13YQVSXwj64f9SaPcnl3rkcgLzQ7Y1o8sidaHZQEocr9IogLX5p8rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e995d423-cd2a-4741-a554-7f6958438b5e",
                            TwoFactorEnabled = false,
                            UserName = "roberth"
                        },
                        new
                        {
                            Id = "76588b1d-43a5-40bf-928b-9c68500b6de2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db15cc02-43e1-43cf-94ff-21bb65111948",
                            Email = "karina@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KARINA@GMAIL.COM",
                            NormalizedUserName = "KARINA",
                            PasswordHash = "AQAAAAEAACcQAAAAEAKQanj/FlKSB/MtUwME6MiI7GBGRet5dR30Yx37C/wHTckvpvDiCECeP5o7Fs8vcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d7a239a-7cb2-4429-a25a-2d05f0103a6f",
                            TwoFactorEnabled = false,
                            UserName = "karina"
                        },
                        new
                        {
                            Id = "fd3476df-ca02-45e8-82f2-995e78d81a94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a89dffd1-3a1b-42f2-8d11-6a101b70e199",
                            Email = "sofia@yahho.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFIA@YAHOO.COM",
                            NormalizedUserName = "SOFIA",
                            PasswordHash = "AQAAAAEAACcQAAAAEJAI5H7VgMny/7ttWlC1hlAgis0l7J71BFfWVQ6IwGESkd4kB0Ilvlosmr1+lOuGdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f208d58-92e4-4ec4-9c53-48290e2f0b18",
                            TwoFactorEnabled = false,
                            UserName = "sofia"
                        },
                        new
                        {
                            Id = "6c37d2ea-dadf-46f0-b96f-4e1dd20d3b73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d06e304-bc1e-4aac-804a-51e2e32627f2",
                            Email = "johnny@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNNY@GMAIL.COM",
                            NormalizedUserName = "JOHNNY",
                            PasswordHash = "AQAAAAEAACcQAAAAEEoOk/sQ+2gjD1jt0AGzHsB/suMf6Vdv4NQG3xAHKK22LxXTc2NIwuWFInFe8BF/2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f0e399d-88de-424f-b664-b3253464285a",
                            TwoFactorEnabled = false,
                            UserName = "johnny"
                        });
                });

            modelBuilder.Entity("OLSofwareDos.Models.Aspirante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Aspirantes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Baggins",
                            Email = "frodo.baggins@example.com",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4193),
                            Nombre = "Frodo",
                            Telefono = "12345678901",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Gamgee",
                            Email = "samwise.gamgee@example.com",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4207),
                            Nombre = "Samwise",
                            Telefono = "+12345678902",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Brandybuck",
                            Email = "meriadoc.brandybuck@example.com",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4209),
                            Nombre = "Meriadoc",
                            Telefono = "+12345678903",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 4,
                            Apellido = "Took",
                            Email = "peregrin.took@example.co",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4210),
                            Nombre = "Peregrin",
                            Telefono = "+12345678904",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 5,
                            Apellido = "Elessar",
                            Email = "aragorn.elessar@example.com",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4212),
                            Nombre = "Aragorn",
                            Telefono = "+12345678905",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 6,
                            Apellido = "Greenleaf",
                            Email = "legolas.greenleaf@example.com",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4224),
                            Nombre = "Legolas",
                            Telefono = "+12345678906",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 7,
                            Apellido = "SonOfGlóin",
                            Email = "gimli.sonofgloin@example.com",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4225),
                            Nombre = "Gimli",
                            Telefono = " +12345678907",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 8,
                            Apellido = "OfGondor",
                            Email = "boromir.ofgondor@example.com",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4227),
                            Nombre = "Boromir",
                            Telefono = "+12345678908",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 9,
                            Apellido = "TheGrey",
                            Email = "gandalf.thegrey@example.com",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4228),
                            Nombre = "Gandalf",
                            Telefono = "+12345678909",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 10,
                            Apellido = "Baggins",
                            Email = "saruman.thewhite@example.com",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4230),
                            Nombre = "Saruman",
                            Telefono = "+123456789010",
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("OLSofwareDos.Models.EstadoPrueba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("EstadoPruebas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Estado = "Registrada",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4335),
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            Estado = "En Proceso",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4338),
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 3,
                            Estado = "Terminada",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4339),
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 4,
                            Estado = "Anulada",
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4340),
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("OLSofwareDos.Models.NivelPrueba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("NivelPruebas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4266),
                            Nivel = "Junior",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4271),
                            Nivel = "Middle",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4272),
                            Nivel = "Senior",
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("OLSofwareDos.Models.Pregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pregunta1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PruebaSeleccionId")
                        .HasColumnType("int");

                    b.Property<string>("Respuesta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PruebaSeleccionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Preguntas");
                });

            modelBuilder.Entity("OLSofwareDos.Models.PruebaSeleccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AspiranteId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Calificacion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CantidadPreguntas")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstadoPruebaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("LenguajeProgramacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NivelPruebaId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoPruebaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AspiranteId");

                    b.HasIndex("EstadoPruebaId");

                    b.HasIndex("NivelPruebaId");

                    b.HasIndex("TipoPruebaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PruebaSeleccions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AspiranteId = 1,
                            Calificacion = 0m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_LoginFunctionality_DotNet",
                            EstadoPruebaId = 2,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4367),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4364),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4364),
                            LenguajeProgramacion = "C#",
                            NivelPruebaId = 1,
                            TipoPruebaId = 1,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            AspiranteId = 2,
                            Calificacion = 95m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_SignUpPageValidation_DotNet",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4377),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4371),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4370),
                            LenguajeProgramacion = "C#",
                            NivelPruebaId = 3,
                            TipoPruebaId = 1,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 3,
                            AspiranteId = 3,
                            Calificacion = 90m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_ArrayManipulation_JavaScript",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4380),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4379),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4378),
                            LenguajeProgramacion = "JavaScript",
                            NivelPruebaId = 2,
                            TipoPruebaId = 2,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 4,
                            AspiranteId = 4,
                            Calificacion = 92m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_AsyncFunction_JavaScript",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4383),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4382),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4381),
                            LenguajeProgramacion = "JavaScript",
                            NivelPruebaId = 3,
                            TipoPruebaId = 2,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 5,
                            AspiranteId = 5,
                            Calificacion = 98m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_DatabaseConnection_Python",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4473),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4471),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4470),
                            LenguajeProgramacion = "Python",
                            NivelPruebaId = 3,
                            TipoPruebaId = 1,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 6,
                            AspiranteId = 6,
                            Calificacion = 88m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_DataAnalysisFunction_Python",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4477),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4476),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4475),
                            LenguajeProgramacion = "Python",
                            NivelPruebaId = 1,
                            TipoPruebaId = 1,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 7,
                            AspiranteId = 7,
                            Calificacion = 0m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_FileCreation_BashScript",
                            EstadoPruebaId = 2,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4481),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4479),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4479),
                            LenguajeProgramacion = "Bash",
                            NivelPruebaId = 2,
                            TipoPruebaId = 2,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 8,
                            AspiranteId = 8,
                            Calificacion = 97m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_DirectoryNavigation_BashScript",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4484),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4482),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4482),
                            LenguajeProgramacion = "Bash",
                            NivelPruebaId = 1,
                            TipoPruebaId = 1,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 9,
                            AspiranteId = 9,
                            Calificacion = 94m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_FormSubmission_HTML",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4487),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4486),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4485),
                            LenguajeProgramacion = "HTML",
                            NivelPruebaId = 1,
                            TipoPruebaId = 1,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 10,
                            AspiranteId = 9,
                            Calificacion = 96m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_ResponsiveDesign_HTML",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4491),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4490),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4489),
                            LenguajeProgramacion = "HTML",
                            NivelPruebaId = 2,
                            TipoPruebaId = 2,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 11,
                            AspiranteId = 10,
                            Calificacion = 90m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_ExceptionHandling_DotNet",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4494),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4493),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4492),
                            LenguajeProgramacion = "C#",
                            NivelPruebaId = 3,
                            TipoPruebaId = 2,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 12,
                            AspiranteId = 1,
                            Calificacion = 90m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_CallbackFunction_JavaScript",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4497),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4496),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4495),
                            LenguajeProgramacion = "JavaScript",
                            NivelPruebaId = 3,
                            TipoPruebaId = 2,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 13,
                            AspiranteId = 2,
                            Calificacion = 98m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_MachineLearningModel_Python",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4501),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4499),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4499),
                            LenguajeProgramacion = "Python",
                            NivelPruebaId = 1,
                            TipoPruebaId = 1,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 14,
                            AspiranteId = 3,
                            Calificacion = 97m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_SystemUpdate_BashScript",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4504),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4502),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4502),
                            LenguajeProgramacion = "Bash",
                            NivelPruebaId = 2,
                            TipoPruebaId = 1,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 15,
                            AspiranteId = 3,
                            Calificacion = 91m,
                            CantidadPreguntas = 15,
                            Descripcion = "Test_LinkNavigation_HTML",
                            EstadoPruebaId = 3,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4507),
                            FechaFin = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4505),
                            FechaInicio = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4505),
                            LenguajeProgramacion = "HTML",
                            NivelPruebaId = 3,
                            TipoPruebaId = 1,
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("OLSofwareDos.Models.TipoPrueba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TipoPruebas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4301),
                            Tipo = "Técnica",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            FechaActualizacion = new DateTime(2024, 1, 7, 11, 12, 14, 398, DateTimeKind.Local).AddTicks(4307),
                            Tipo = "Práctica",
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("OLSofwareDos.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "Aa123456!",
                            RoleId = "1",
                            Username = "Roberth"
                        });
                });

            modelBuilder.Entity("OLSofwareDos.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OLSofwareDos.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OLSofwareDos.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OLSofwareDos.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OLSofwareDos.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OLSofwareDos.Models.Aspirante", b =>
                {
                    b.HasOne("OLSofwareDos.Models.Usuario", "Usuario")
                        .WithMany("Aspirantes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("OLSofwareDos.Models.EstadoPrueba", b =>
                {
                    b.HasOne("OLSofwareDos.Models.Usuario", "Usuario")
                        .WithMany("EstadoPruebas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("OLSofwareDos.Models.NivelPrueba", b =>
                {
                    b.HasOne("OLSofwareDos.Models.Usuario", "Usuario")
                        .WithMany("NivelPruebas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("OLSofwareDos.Models.Pregunta", b =>
                {
                    b.HasOne("OLSofwareDos.Models.PruebaSeleccion", "PruebaSeleccion")
                        .WithMany("Pregunta")
                        .HasForeignKey("PruebaSeleccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OLSofwareDos.Models.Usuario", "Usuario")
                        .WithMany("Pregunta")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("PruebaSeleccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("OLSofwareDos.Models.PruebaSeleccion", b =>
                {
                    b.HasOne("OLSofwareDos.Models.Aspirante", "Aspirante")
                        .WithMany("PruebaSeleccions")
                        .HasForeignKey("AspiranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OLSofwareDos.Models.EstadoPrueba", "EstadoPrueba")
                        .WithMany("PruebaSeleccions")
                        .HasForeignKey("EstadoPruebaId");

                    b.HasOne("OLSofwareDos.Models.NivelPrueba", "NivelPrueba")
                        .WithMany("PruebaSeleccions")
                        .HasForeignKey("NivelPruebaId");

                    b.HasOne("OLSofwareDos.Models.TipoPrueba", "TipoPrueba")
                        .WithMany("PruebaSeleccions")
                        .HasForeignKey("TipoPruebaId");

                    b.HasOne("OLSofwareDos.Models.Usuario", "Usuario")
                        .WithMany("PruebaSeleccions")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Aspirante");

                    b.Navigation("EstadoPrueba");

                    b.Navigation("NivelPrueba");

                    b.Navigation("TipoPrueba");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("OLSofwareDos.Models.TipoPrueba", b =>
                {
                    b.HasOne("OLSofwareDos.Models.Usuario", "Usuario")
                        .WithMany("TipoPruebas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("OLSofwareDos.Models.Aspirante", b =>
                {
                    b.Navigation("PruebaSeleccions");
                });

            modelBuilder.Entity("OLSofwareDos.Models.EstadoPrueba", b =>
                {
                    b.Navigation("PruebaSeleccions");
                });

            modelBuilder.Entity("OLSofwareDos.Models.NivelPrueba", b =>
                {
                    b.Navigation("PruebaSeleccions");
                });

            modelBuilder.Entity("OLSofwareDos.Models.PruebaSeleccion", b =>
                {
                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("OLSofwareDos.Models.TipoPrueba", b =>
                {
                    b.Navigation("PruebaSeleccions");
                });

            modelBuilder.Entity("OLSofwareDos.Models.Usuario", b =>
                {
                    b.Navigation("Aspirantes");

                    b.Navigation("EstadoPruebas");

                    b.Navigation("NivelPruebas");

                    b.Navigation("Pregunta");

                    b.Navigation("PruebaSeleccions");

                    b.Navigation("TipoPruebas");
                });
#pragma warning restore 612, 618
        }
    }
}
